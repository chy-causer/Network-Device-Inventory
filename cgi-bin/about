#!/usr/bin/perl

use warnings FATAL => 'all';
use strict;
our $VERSION = qw('1.0.0');

use CGI;
use Config::Tiny;
use Data::Dumper;
use DateTime;
use Digest::SHA;
use File::Slurp;
use Log::Log4perl;
use LWP::UserAgent;
use Template;

use Inventory;

my $BASEURL = CGI::url( -base => 1 );
my $HOSTNAME = $BASEURL;

# remove everything from the first . onwards
$HOSTNAME =~ s/\..*$//gx;

# remove everything from the start to the last /
$HOSTNAME =~ s/^.*\///gx;

my $CONFIG      = Config::Tiny->new();
my $CONFIG_FILE = "/srv/www/$HOSTNAME/lib/inventory.ini";
$CONFIG = Config::Tiny->read("$CONFIG_FILE");

my $valid_users       = $CONFIG->{'general'}->{allowed_users};
my $htmltemplatepath  = $CONFIG->{'locations'}->{tt_dir};
my $CGIDIR            = $CONFIG->{'locations'}->{cgidir};
my $manifest          = $CONFIG->{'locations'}->{manifest};
my $localtemplatepath = $CONFIG->{'locations'}->{local_tt_dir};
my $logconfigfile    = $CONFIG->{'locations'}->{log_conf};

Log::Log4perl->init($logconfigfile);
my $logger = Log::Log4perl->get_logger();

my $message;

#############################################################################
#                                     main                                  #
#############################################################################

my $q = CGI->new();
print $q->header();

# this just loads the default site settings
my $tt = Template->new( { INCLUDE_PATH => [$localtemplatepath, $htmltemplatepath] } );

# print the stock header (banner and title)
$tt->process(
    'inventory_header.tt',
    {
        pagetitle   => 'Index',
        baseurl     => $BASEURL,
        groupname   => $CONFIG->{'general'}->{groupname},
        appname     => $CONFIG->{'general'}->{appname},
        companyname => $CONFIG->{'general'}->{companyname},
    }
);

# invalid users get no further than the next line
if ( !exists $CONFIG->{general}->{demo} ) {
    Inventory::acl_checker( $tt, $valid_users );
}

# I differenciate between get and post, not everyone agrees with this but
# there is an RFC2616 that suggests that we should. I do so for behaviour not
# security reasons.
my %gets = Inventory::populate_query_fields();    # not strictly a get field
my %POSTS;
if ( $ENV{REQUEST_METHOD} eq 'POST' ) {
    %POSTS = $q->Vars;
}

if ( $POSTS{'file'} ) {
    $logger->info("$ENV{REMOTE_USER} posts to update a inventory file");
    $message = update_file( $manifest, $POSTS{'file'} );
}

if ( not check_manifest($manifest) ) {
    $logger->info("Something wrong with the manifest, building another");
    create_manifest( $manifest,
        ( $CGIDIR, $htmltemplatepath, '/usr/local/lib/site_perl/Inventory' ) );
}

my $files = read_manifest($manifest);

$tt->process(
    'inventory_about.tt',
    {
        files   => $files,
        message => $message,
    }
);

$tt->process('inventory_footer.tt');

#############################################################################
#                            subroutines                                    #
#############################################################################

sub file_details {
    my ( $file, $directory ) = @_;

    my $GIT_HUB_URL =
      'https://raw.github.com/guyed/Network-Device-Inventory/master';

    if ( not defined $file ) {
        warn "file_details called incorrectly";
        return;
    }
    if ( not defined $directory ) {
        warn "file_details called incorrectly";
        return;
    }

    if ( $file =~ m/\.tt$/ && $file !~ m/^inventory_/ ) {

        # tt file belonging to other project
        return;
    }
    if ( not -f "$directory/$file" or -l "$directory/$file" ) {

        # not a file
        return;
    }

    my %details = (
        'name'            => "$directory/$file",
        'revision'        => 'svn header missing?',
        'lastchangeddate' => 'svn header missing?',
        'error'           => '1',
        'type'            => 'script',
        'github_url'      => "$GIT_HUB_URL/cgi-bin/$file",
    );

    if ( $file =~ m/\.tt$/ ) {
        $details{'type'}       = 'template';
        $details{'github_url'} = "$GIT_HUB_URL/lib/tt/$file";
    }
    elsif ( $file eq 'Inventory.pm' ) {
        $details{'type'}       = 'module';
        $details{'github_url'} = "$GIT_HUB_URL/lib/modules/$file";
    }
    elsif ( $file =~ m/\.pm$/ ) {
        $details{'type'}       = 'module';
        $details{'github_url'} = "$GIT_HUB_URL/lib/modules/Inventory/$file";
    }

    my $l_sha = Digest::SHA->new();
    $l_sha->addfile("$directory/$file");
    $details{'local_sha1'} = $l_sha->hexdigest;

    my $ua = LWP::UserAgent->new;
    $ua->timeout(10);
    $ua->env_proxy;

    my $response = $ua->get( $details{'github_url'} );

    if ( not $response->is_success ) {
        $details{'github_sha1'} = 'unretrieved';
        die $response->status_line;
    }
    else {
        my $g_sha = Digest::SHA->new();
        $g_sha->add( $response->decoded_content );
        $details{'github_sha1'} = $g_sha->hexdigest;
    }

    my @lines = File::Slurp::read_file("$directory/$file");
    foreach my $line (@lines) {

        next if $line !~ m/^#/;
        if ( $line =~ m/^#[\s]*\$Id:\s(\S+)\s(\S+)\s(\S+)\s/ ) {

            # everything worked
            $details{'error'} = 0;

            if ( $1 ne $file ) {

                # spoke too soon
                $details{'name'} =
                  "Error: SVN properties not correctly set on $file";
                $details{'error'} = 1;
            }
            $details{'revision'}        = $2;
            $details{'lastchangeddate'} = $3;

            last;
        }
    }
    return \%details;
}

sub create_manifest {
    my ( $filelist, @dirs ) = @_;

    my %file;

    # colate our data
    foreach my $dirname (@dirs) {
        opendir DIR, $dirname or die "cant opendir $dirname: $!";

        while ( defined( my $filename = readdir DIR ) ) {
            my $ref = file_details( $filename, $dirname );
            if ( defined $ref ) {
                $file{$filename} = $ref;
            }
        }
    }

    # now write it to a file
    my @output;
    my $dt = DateTime->now;
    $dt->set_hour(0);
    $dt->set_minute(0);
    $dt->set_second(0);

    my $date = $dt->iso8601();

    foreach my $entry ( keys %file ) {

        # localname localsha remotename remotesha date type
        my $line =
            "$file{$entry}{name} $file{$entry}{local_sha1} "
          . "$file{$entry}{github_url} $file{$entry}{github_sha1} "
          . "$date $file{$entry}{type}\n";
        push @output, $line;
    }

    File::Slurp::write_file( "$filelist", @output )
      or die "Can't write $filelist : $!";

    return;
}

sub read_manifest {
    my $filelist = shift;
    my %files;

    my @lines = File::Slurp::read_file("$filelist");
    foreach my $line (@lines) {

        # skip blank lines
        if ( $line =~ m/^\s*$/ ) {
            next;
        }

        my @details = split ' ', $line;
        my %file;
        $file{name}           = $details[0];
        $file{local_sha1}     = $details[1];
        $file{github_url}     = $details[2];
        $file{github_sha1}    = $details[3];
        $file{date}           = $details[4];
        $file{type}           = $details[5];
        $files{ $details[0] } = \%file;
    }

    return \%files;
}

sub update_file {
    my $filelist = shift;
    my $updatef  = shift;

    # check the given filename is in our manifest so someone doesnt try and do
    # odd things
    my %current = %{ read_manifest($filelist) };

    if ( not exists $current{$updatef} ) {
        return
"Internal Error: That file doesn't seem to be part of the application I know about";
    }

    # if it is, retrieve it
    my $ua = LWP::UserAgent->new;
    $ua->timeout(10);
    $ua->env_proxy;

    my $response = $ua->get( $current{$updatef}{'github_url'} );

    if ( not $response->is_success ) {
        warn
          "Unable to download $current{$updatef}{'github_url'} due to : $!\n";
        return "Internal Error: I don't seem to be able to download that file";
    }

    # overwrite the existing file
    my @output = $response->decoded_content;
    if ( not eval { File::Slurp::write_file( "$updatef", @output ) } ) {
        warn "Couldn't update $updatef with downloaded content : $!\n";
        return
"Internal Error: I couldn't overwrite that file - probably a permissions issue";
    }

    return 'File overwritten';
}

sub check_manifest {
    my $file = shift;

    if ( not -r $file ) {
        return 0;
    }

    my %data = %{ read_manifest($file) };

    if ( keys(%data) < 1 ) {
        return 0;
    }

    # TODO: if older than X ....

    debug("check_manifest thinks the manifest looks fine.");

    return 1;
}

sub debug {
    my @unknown = @_;

    print '<pre class="debug">DEBUG: ';
    print Dumper \@unknown;
    print '</pre>';

    return;
}

__END__

=head1 NAME
integrity

=head1 VERSION

This documentation refers to version 1.0.0 

=head1 USAGE

=head1 REQUIRED ARGUMENTS

=head1 OPTIONS

=head1 DESCRIPTION

=head1 DIAGNOSTICS

error messages

=head1 CONFIGURATION

/srv/www/$HOSTNAME/lib/inventory.ini

=head1 DEPENDENCIES

=head1 INCOMPATIBILITIES

none known

=head1 BUGS AND LIMITATIONS

Report any found to <guyjohnedwards@gmail.com>

=head1 AUTHOR

Guy Edwards, maintained by <guyjohnedwards@gmail.com>

=head1 LICENSE AND COPYRIGHT

Network Device Inventory - keep a database of devices to feed other systems
(such as monitoring software). Copyright 2007 University of Oxford

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 51 Franklin
Street, Fifth Floor, Boston, MA 02110-1301 USA.

The University of Oxford disclaims all copyright interest in the program
`Inventory' written by Guy Edwards as agreed by Dr. Stuart Lee, Director of
Oxford University Computer Services.

Oliver Gorwits, who in 2008 contributed sections of the hostgroups programming
also disclaims all copyright interest in the program.
