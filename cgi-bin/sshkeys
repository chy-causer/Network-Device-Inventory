#!/usr/bin/perl

use warnings FATAL => 'all';
use strict;
our $VERSION = qw('1.0.0');

use CGI;
use Config::Tiny;
use DBD::Pg;
use DBI;
use Log::Log4perl;
use Template;

use Inventory;
use Inventory::Sshkeys;
use Inventory::Hosts;

my $BASEURL = CGI::url( -base => 1 );
my $HOSTNAME = $BASEURL;

# remove everything from the first . onwards
$HOSTNAME =~ s/\..*$//gx;

# remove everything from the start to the last /
$HOSTNAME =~ s/^.*\///gx;

my $CONFIG      = Config::Tiny->new();
my $CONFIG_FILE = "/srv/www/$HOSTNAME/lib/inventory.ini";
$CONFIG = Config::Tiny->read("$CONFIG_FILE");

my $dbhost      = $CONFIG->{'database'}->{db_host};
my $dbname      = $CONFIG->{'database'}->{db_name};
my $dbuser      = $CONFIG->{'database'}->{db_user};
my $dbpass      = $CONFIG->{'database'}->{db_pass};
my $dbh         = Inventory::dbconnect( $dbname, $dbuser, $dbhost, $dbpass );
my $valid_users = $CONFIG->{'general'}->{allowed_users};
my $htmltemplatepath  = $CONFIG->{'locations'}->{tt_dir};
my $localtemplatepath = $CONFIG->{'locations'}->{local_tt_dir};
my $logconfigfile     = $CONFIG->{'locations'}->{log_conf};

Log::Log4perl->init($logconfigfile);
my $logger = Log::Log4perl->get_logger();

#############################################################################
#                                     main                                  #
#############################################################################

my $q = CGI->new();
print $q->header();

# this just loads the default site settings
my $tt = Template->new(
    { INCLUDE_PATH => [ $localtemplatepath, $htmltemplatepath ] } );

# print the stock header (banner and title)
$tt->process(
    'inventory_header.tt',
    {
        pagetitle   => 'SSH Key Fingerprints',
        baseurl     => $BASEURL,
        groupname   => $CONFIG->{'general'}->{groupname},
        appname     => $CONFIG->{'general'}->{appname},
        companyname => $CONFIG->{'general'}->{companyname},
    }
);

# invalid users get no further than the next line
if ( !exists $CONFIG->{general}->{demo} ) {
    Inventory::acl_checker( $tt, $valid_users );
}

# I differenciate between get and post, not everyone agrees with this but
# there is an RFC2616 that suggests that we should. I do so for behaviour not
# security reasons.
my %gets = Inventory::populate_query_fields();    # not strictly a get field
my %POSTS;
if ( $ENV{REQUEST_METHOD} eq 'POST' ) {
    %POSTS = $q->Vars;
}

my ( $edit, $delete );
if ( $gets{'sshkey_id'} && $gets{'sshkey_id'} =~ m/^[\d]+$/x ) {
    if ( exists $gets{'action'} and $gets{'action'} eq 'delete' ) {
        $logger->debug(
            "$ENV{REMOTE_USER} takes first step to delete ID $gets{'sshkey_id'}"
        );
        $delete = $gets{'sshkey_id'};
    }
    else {
        $logger->debug(
            "$ENV{REMOTE_USER} takes first step to edit ID $gets{'sshkey_id'}");
        $edit = $gets{'sshkey_id'};
    }
}

my %message;    # communicate success or failure, sink or swim

# are we editing/deleting an existing entry?
if ( exists $POSTS{'action'} ) {
    if ( $POSTS{'action'} eq 'delete' ) {
        $logger->info(
            "$ENV{REMOTE_USER} posts to delete ID $POSTS{'sshkey_id'}");
        %message =
          %{ Inventory::Sshkeys::delete_sshkeys( $dbh, $POSTS{'sshkey_id'} ) };
    }
    elsif ( $POSTS{'action'} eq 'edit' ) {
        $logger->info("$ENV{REMOTE_USER} posts to edit ID $POSTS{'sshkey_id'}");
        %message = %{ Inventory::Sshkeys::edit_sshkeys( $dbh, \%POSTS ) };
    }
    elsif ( $POSTS{'action'} eq 'create' ) {
        $logger->info("$ENV{REMOTE_USER} posts to create a new entry");
        %message = %{ Inventory::Sshkeys::create_sshkeys( $dbh, \%POSTS ) };
    }
}

# list all the sshkeys (array of hashes)
my @sshkeys = Inventory::Sshkeys::get_sshkeys_info($dbh);

# list all the hosts (array of hashes)
my @hosts = Inventory::Hosts::get_hosts_info($dbh);

# host_id is so that a host without an sshkey can quickly have one added. E.g. on
# the information overview for the host there is a link to 'create an ssh key
# for this host' and selecting that link loads this page with the correct host
# already selected in the new sshkey form.

$tt->process(
    'inventory_sshkeys.tt',
    {
        sshkeys => \@sshkeys,
        message => \%message,
        edit    => $edit,
        delete  => $delete,
        hosts   => \@hosts,
        host_id => $gets{'host_id'},
    }
);
$tt->process( 'inventory_footer.tt', {} );

__END__

=head1 NAME

sshkeys

=head1 VERSION

This documentation refers to version 1.0.0 

=head1 USAGE

Used as a cgi webpage

=head1 REQUIRED ARGUMENTS

none

=head1 OPTIONS

=head1 DESCRIPTION

Show the ssh keys our hosts have and let people edit or add records.

=head1 DIAGNOSTICS

User errors should be explained to the user via the interface in helpful
laymans terms.

Fatal error messages should be logged to the apache error log with auditing
information to the applications logging file.

=head1 CONFIGURATION AND ENVIRONMENT

/srv/www/$HOSTNAME/lib/inventory.ini

=head1 DEPENDENCIES

=head1 INCOMPATIBILITIES

none known

=head1 BUGS AND LIMITATIONS

Report any found to <guyjohnedwards@gmail.com>

=head1 AUTHOR

Guy Edwards, maintained by <guyjohnedwards@gmail.com>

=head1 LICENSE AND COPYRIGHT

Network Device Inventory - keep a database of devices to feed other systems
(such as monitoring software). Copyright 2007 University of Oxford

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 51 Franklin
Street, Fifth Floor, Boston, MA 02110-1301 USA.

The University of Oxford agrees to the release under the GPL of in the program
`Inventory' written by Guy Edwards as agreed by Dr. Stuart Lee, Director of
Oxford University Computer Services.

Oliver Gorwits, who in 2008 contributed sections of the hostgroups programming
also agreed to the code release under the GPL.
